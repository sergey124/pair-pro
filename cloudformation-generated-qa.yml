AWSTemplateFormatVersion: 2010-09-09
Resources:
  AutoscalingGroup:
    Properties:
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      MaxSize: "10"
      MinSize: "1"
      VPCZoneIdentifier:
        - subnet-42df310e
        - subnet-00ee426a
        - subnet-27e7fc5a
    Type: AWS::AutoScaling::AutoScalingGroup
  CapacityProvider:
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn:
          Ref: AutoscalingGroup
        ManagedScaling:
          TargetCapacity: 100
      Tags:
        - Key: com.docker.compose.project
          Value: pairbot
    Type: AWS::ECS::CapacityProvider
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project pairbot
      Name: pairbot.local
      Vpc: vpc-bc39fcd6
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      CapacityProviders:
        - Ref: CapacityProvider
      ClusterName: pair-pro
      Tags:
        - Key: com.docker.compose.project
          Value: pairbot
    Type: AWS::ECS::Cluster
  DefaultNetwork:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: pairbot Security Group for default network
      Tags:
        - Key: com.docker.compose.project
          Value: pairbot
        - Key: com.docker.compose.network
          Value: pairbot_default
      VpcId: vpc-bc39fcd6
  DefaultNetworkIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            Ref: DefaultNetwork
  EC2InstanceProfile:
    Properties:
      Roles:
        - Ref: EC2InstanceRole
    Type: AWS::IAM::InstanceProfile
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: { }
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Tags:
        - Key: com.docker.compose.project
          Value: pairbot
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      ImageId: ami-09e5466d2ec7c970d
      InstanceType: t3.large
      SecurityGroups:
        - Ref: DefaultNetwork
      UserData: IyEvYmluL2Jhc2gKZWNobyBFQ1NfQ0xVU1RFUj1wYWlyLXBybyA+PiAvZXRjL2Vjcy9lY3MuY29uZmln
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/pairbot
    Type: AWS::Logs::LogGroup
  PairbotService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Ref: DefaultNetwork
          Subnets:
            - subnet-42df310e
            - subnet-00ee426a
            - subnet-27e7fc5a
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - PairbotServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: pairbot
        - Key: com.docker.compose.service
          Value: pairbot
      TaskDefinition:
        Ref: PairbotTaskDefinition

  PairbotServiceDiscoveryEntry:
    Properties:
      Description: '"pairbot" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: pairbot
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  PairbotTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: Pairbot_Secrets_InitContainer
          Essential: false
          Image: docker/ecs-secrets-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: pairbot
          MountPoints:
            - ContainerPath: /run/secrets/
              SourceVolume: secrets
          Command:
            - '[{"Name":"pairbot-secret","Keys":null},{"Name":"tg-bot-token","Keys":null},{"Name":"tg-bot-username","Keys":null}]'
          Secrets:
            - Name: pairbot-secret
              ValueFrom: 'arn:aws:secretsmanager:eu-central-1:077576062077:secret:pairbot-tg-bot-token-and-username-XGMwG4'
            - Name: tg-bot-token
              ValueFrom: 'arn:aws:secretsmanager:eu-central-1:077576062077:secret:pairbot-tg-bot-token-and-username-XGMwG4:tg-bot-token::'
            - Name: tg-bot-username
              ValueFrom: 'arn:aws:secretsmanager:eu-central-1:077576062077:secret:pairbot-tg-bot-token-and-username-XGMwG4:tg-bot-username::'
        - Name: Pairbot_ResolvConf_InitContainer
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: pairbot
          Command:
            - eu-central-1.compute.internal
            - pairbot.local
        - Name: pairbot
          Environment:
            - Name: SPRING_PROFILES_ACTIVE
              Value: mysql-dev
          Essential: true
          Image: 077576062077.dkr.ecr.eu-central-1.amazonaws.com/pairbot:0.0.4@sha256:af4fbfbdaa8da6a03e206fba88daf48bf2115453a18c4062caf1f1e482ac73b9
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: pairbot
          MountPoints:
            - ContainerPath: /run/secrets/
              ReadOnly: true
              SourceVolume: secrets
          DependsOn:
            - Condition: SUCCESS
              ContainerName: Pairbot_Secrets_InitContainer
            - Condition: SUCCESS
              ContainerName: Pairbot_ResolvConf_InitContainer
          Command:
            - /bin/sh
            - '-c'
            - >-
              export
              DB_URL=${DBInstance.Endpoint.Address}:${DBInstance.Endpoint.Port}/defaultdb
      Cpu: "2048"
      ExecutionRoleArn:
        Ref: PairbotTaskExecutionRole
      Family: pairbot-pairbot
      Memory: "4096"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      Volumes:
        - Name: secrets
  PairbotTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                  - ssm:GetParameters
                  - kms:Decrypt
                Condition: {}
                Effect: Allow
                Principal: {}
                Resource:
                  - arn:aws:secretsmanager:eu-central-1:077576062077:secret:pairbot-tg-bot-token-and-username-XGMwG4
                  - 'arn:aws:secretsmanager:eu-central-1:077576062077:secret:pairbot-tg-bot-token-and-username-XGMwG4:tg-bot-token::'
                  - 'arn:aws:secretsmanager:eu-central-1:077576062077:secret:pairbot-tg-bot-token-and-username-XGMwG4:tg-bot-username::'
          PolicyName: pairbotGrantAccessToSecrets
      Tags:
        - Key: com.docker.compose.project
          Value: pairbot
        - Key: com.docker.compose.service
          Value: pairbot
    Type: AWS::IAM::Role

  MyRDSInstanceRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Pairbot secret
      Tags:
        - Key: AppName
          Value: MyApp
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: defaultdb
      DBInstanceIdentifier: webapp-db
      AllocatedStorage: "5"
      DBInstanceClass: db.t3.micro
      Engine: mysql
      MasterUsername: '{{resolve:secretsmanager:pairbot-tg-bot-token-and-username:SecretString:db-user}}'
      MasterUserPassword: '{{resolve:secretsmanager:pairbot-tg-bot-token-and-username:SecretString:db-password}}'
      Tags:
        - Key: Name
          Value: !Join ["-", [webapp-rds, qa-env]]
      VPCSecurityGroups:
        - !GetAtt DBEC2SecurityGroup.GroupId
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot